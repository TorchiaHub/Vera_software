name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  RUST_VERSION: 'stable'

jobs:
  # Job 1: Lint and code quality checks
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: TypeScript type checking
        run: npm run type-check

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=moderate

  # Job 2: Backend tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: vera_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: vera_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Setup test database
        run: |
          cd backend
          npm run db:migrate
        env:
          DATABASE_URL: postgresql://vera_test:test_password@localhost:5432/vera_test
          NODE_ENV: test

      - name: Run backend tests
        run: npm run test:backend
        env:
          DATABASE_URL: postgresql://vera_test:test_password@localhost:5432/vera_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key
          NODE_ENV: test

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./tests/coverage/backend/lcov.info
          flags: backend
          name: backend-coverage

  # Job 3: Frontend tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Run frontend tests
        run: npm run test:frontend

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./tests/coverage/frontend/lcov.info
          flags: frontend
          name: frontend-coverage

  # Job 4: Build applications
  build:
    name: Build Applications
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs: [lint, backend-test, frontend-test]

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Rust (for Tauri)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Build frontend
        run: npm run build:frontend

      - name: Build backend
        run: npm run build:backend

      - name: Build Tauri app
        run: npm run build:tauri
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Upload build artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: linux-builds
          path: |
            frontend/dist/
            backend/dist/
            src-tauri/target/release/bundle/
          retention-days: 7

      - name: Upload build artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows-builds
          path: |
            frontend/dist/
            backend/dist/
            src-tauri/target/release/bundle/
          retention-days: 7

      - name: Upload build artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: macos-builds
          path: |
            frontend/dist/
            backend/dist/
            src-tauri/target/release/bundle/
          retention-days: 7

  # Job 5: E2E tests
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: vera_e2e
          POSTGRES_PASSWORD: e2e_password
          POSTGRES_DB: vera_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup E2E database
        run: |
          cd backend
          npm run db:migrate
        env:
          DATABASE_URL: postgresql://vera_e2e:e2e_password@localhost:5432/vera_e2e
          NODE_ENV: test

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: linux-builds

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://vera_e2e:e2e_password@localhost:5432/vera_e2e
          NODE_ENV: test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            tests/coverage/e2e-report/
            tests/coverage/e2e-results.json
          retention-days: 7

      - name: Upload E2E videos and screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-videos-screenshots
          path: |
            tests/test-results/
          retention-days: 7

  # Job 6: Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript,typescript

  # Job 7: Performance testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: vera_perf
          POSTGRES_PASSWORD: perf_password
          POSTGRES_DB: vera_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run bootstrap

      - name: Setup performance database
        run: |
          cd backend
          npm run db:migrate
          npm run db:seed:performance
        env:
          DATABASE_URL: postgresql://vera_perf:perf_password@localhost:5432/vera_perf
          NODE_ENV: test

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: linux-builds

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run load testing
        run: npm run test:load
        env:
          DATABASE_URL: postgresql://vera_perf:perf_password@localhost:5432/vera_perf

  # Job 8: Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, build, e2e-test, security]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Notify Slack on success
        if: needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' && needs.build.result == 'success' && needs.e2e-test.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ All tests passed! Build is ready for deployment.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure' || needs.build.result == 'failure' || needs.e2e-test.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Build failed! Please check the CI results.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}